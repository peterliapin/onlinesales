// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OnlineSales.Data;
using OnlineSales.Entities;

#nullable disable

namespace OnlineSales.Migrations
{
    [DbContext(typeof(PgDbContext))]
    [Migration("20240131193706_UserData")]
    partial class UserData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ContactDeal", b =>
                {
                    b.Property<int>("ContactsId")
                        .HasColumnType("integer")
                        .HasColumnName("contacts_id");

                    b.Property<int>("DealsId")
                        .HasColumnType("integer")
                        .HasColumnName("deals_id");

                    b.HasKey("ContactsId", "DealsId")
                        .HasName("pk_contact_deal");

                    b.HasIndex("DealsId")
                        .HasDatabaseName("ix_contact_deal_deals_id");

                    b.ToTable("contact_deal", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text")
                        .HasColumnName("provider_key");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_logins");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_logins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("RoleId")
                        .HasColumnType("text")
                        .HasColumnName("role_id");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_user_roles");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_roles_role_id");

                    b.ToTable("user_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_tokens");

                    b.ToTable("user_tokens", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.Property<int?>("ContinentCode")
                        .HasColumnType("integer")
                        .HasColumnName("continent_code");

                    b.Property<int?>("CountryCode")
                        .HasColumnType("integer")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<string>("EmployeesRange")
                        .HasColumnType("text")
                        .HasColumnName("employees_range");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<double?>("Revenue")
                        .HasColumnType("double precision")
                        .HasColumnName("revenue");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("text")
                        .HasColumnName("site_url");

                    b.Property<Dictionary<string, string>>("SocialMedia")
                        .HasColumnType("jsonb")
                        .HasColumnName("social_media");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string[]>("Tags")
                        .HasColumnType("jsonb")
                        .HasColumnName("tags");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_account_name");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.ChangeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<int>("EntityState")
                        .HasColumnType("integer")
                        .HasColumnName("entity_state");

                    b.Property<int>("ObjectId")
                        .HasColumnType("integer")
                        .HasColumnName("object_id");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("object_type");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("Id")
                        .HasName("pk_change_log");

                    b.ToTable("change_log", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.ChangeLogTaskLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChangeLogIdMax")
                        .HasColumnType("integer")
                        .HasColumnName("change_log_id_max");

                    b.Property<int>("ChangeLogIdMin")
                        .HasColumnType("integer")
                        .HasColumnName("change_log_id_min");

                    b.Property<int>("ChangesProcessed")
                        .HasColumnType("integer")
                        .HasColumnName("changes_processed");

                    b.Property<DateTime>("End")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start");

                    b.Property<int>("State")
                        .HasColumnType("integer")
                        .HasColumnName("state");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_name");

                    b.HasKey("Id")
                        .HasName("pk_change_log_task_log");

                    b.ToTable("change_log_task_log", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author_email");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author_name");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<int>("CommentableId")
                        .HasColumnType("integer")
                        .HasColumnName("commentable_id");

                    b.Property<string>("CommentableType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("commentable_type");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer")
                        .HasColumnName("parent_id");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_comment");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_comment_contact_id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("ix_comment_parent_id");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<string>("Address1")
                        .HasColumnType("text")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasColumnType("text")
                        .HasColumnName("address2");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birthday");

                    b.Property<string>("CityName")
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.Property<string>("CompanyName")
                        .HasColumnType("text")
                        .HasColumnName("company_name");

                    b.Property<int?>("ContinentCode")
                        .HasColumnType("integer")
                        .HasColumnName("continent_code");

                    b.Property<int?>("CountryCode")
                        .HasColumnType("integer")
                        .HasColumnName("country_code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("Department")
                        .HasColumnType("text")
                        .HasColumnName("department");

                    b.Property<int>("DomainId")
                        .HasColumnType("integer")
                        .HasColumnName("domain_id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("JobTitle")
                        .HasColumnType("text")
                        .HasColumnName("job_title");

                    b.Property<string>("Language")
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("LastName")
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("Phone")
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<string>("Prefix")
                        .HasColumnType("text")
                        .HasColumnName("prefix");

                    b.Property<Dictionary<string, string>>("SocialMedia")
                        .HasColumnType("jsonb")
                        .HasColumnName("social_media");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<int?>("Timezone")
                        .HasColumnType("integer")
                        .HasColumnName("timezone");

                    b.Property<int?>("UnsubscribeId")
                        .HasColumnType("integer")
                        .HasColumnName("unsubscribe_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.Property<string>("Zip")
                        .HasColumnType("text")
                        .HasColumnName("zip");

                    b.HasKey("Id")
                        .HasName("pk_contact");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_contact_account_id");

                    b.HasIndex("DomainId")
                        .HasDatabaseName("ix_contact_domain_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_contact_email");

                    b.HasIndex("UnsubscribeId")
                        .HasDatabaseName("ix_contact_unsubscribe_id");

                    b.ToTable("contact", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.ContactEmailSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_contact_email_schedule");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_contact_email_schedule_contact_id");

                    b.HasIndex("ScheduleId")
                        .HasDatabaseName("ix_contact_email_schedule_schedule_id");

                    b.ToTable("contact_email_schedule", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("AllowComments")
                        .HasColumnType("boolean")
                        .HasColumnName("allow_comments");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("author");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<string>("CoverImageAlt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cover_image_alt");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cover_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("published_at");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("slug");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_content");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_content_slug");

                    b.ToTable("content", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Deal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<DateTime?>("ActualCloseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_close_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("DealCurrency")
                        .HasColumnType("text")
                        .HasColumnName("deal_currency");

                    b.Property<int>("DealPipelineId")
                        .HasColumnType("integer")
                        .HasColumnName("deal_pipeline_id");

                    b.Property<int>("DealPipelineStageId")
                        .HasColumnType("integer")
                        .HasColumnName("deal_pipeline_stage_id");

                    b.Property<decimal?>("DealValue")
                        .HasColumnType("numeric")
                        .HasColumnName("deal_value");

                    b.Property<DateTime?>("ExpectedCloseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expected_close_date");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_deal");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_deal_account_id");

                    b.HasIndex("DealPipelineId")
                        .HasDatabaseName("ix_deal_deal_pipeline_id");

                    b.HasIndex("DealPipelineStageId")
                        .HasDatabaseName("ix_deal_deal_pipeline_stage_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_deal_user_id");

                    b.ToTable("deal", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.DealPipeline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_deal_pipeline");

                    b.ToTable("deal_pipeline", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.DealPipelineStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<int>("DealPipelineId")
                        .HasColumnType("integer")
                        .HasColumnName("deal_pipeline_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("Order")
                        .HasColumnType("integer")
                        .HasColumnName("order");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_deal_pipeline_stage");

                    b.HasIndex("DealPipelineId")
                        .HasDatabaseName("ix_deal_pipeline_stage_deal_pipeline_id");

                    b.ToTable("deal_pipeline_stage", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Discount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<int?>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<int?>("OrderItemId")
                        .HasColumnType("integer")
                        .HasColumnName("order_item_id");

                    b.Property<int>("PromotionId")
                        .HasColumnType("integer")
                        .HasColumnName("promotion_id");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.Property<decimal>("Value")
                        .HasColumnType("numeric")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_discount");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_discount_order_id");

                    b.HasIndex("OrderItemId")
                        .IsUnique()
                        .HasDatabaseName("ix_discount_order_item_id");

                    b.HasIndex("PromotionId")
                        .HasDatabaseName("ix_discount_promotion_id");

                    b.ToTable("discount", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Domain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccountId")
                        .HasColumnType("integer")
                        .HasColumnName("account_id");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("integer")
                        .HasColumnName("account_status");

                    b.Property<bool?>("CatchAll")
                        .HasColumnType("boolean")
                        .HasColumnName("catch_all");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<bool?>("Disposable")
                        .HasColumnType("boolean")
                        .HasColumnName("disposable");

                    b.Property<bool?>("DnsCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("dns_check");

                    b.Property<List<DnsRecord>>("DnsRecords")
                        .HasColumnType("jsonb")
                        .HasColumnName("dns_records");

                    b.Property<string>("FaviconUrl")
                        .HasColumnType("text")
                        .HasColumnName("favicon_url");

                    b.Property<bool?>("Free")
                        .HasColumnType("boolean")
                        .HasColumnName("free");

                    b.Property<bool?>("HttpCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("http_check");

                    b.Property<bool?>("MxCheck")
                        .HasColumnType("boolean")
                        .HasColumnName("mx_check");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("pk_domain");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("ix_domain_account_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_domain_name");

                    b.ToTable("domain", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.EmailGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_email_group");

                    b.ToTable("email_group", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.EmailLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("FromEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_email");

                    b.Property<string>("MessageId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_id");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recipient");

                    b.Property<int?>("ScheduleId")
                        .HasColumnType("integer")
                        .HasColumnName("schedule_id");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("integer")
                        .HasColumnName("template_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_email_log");

                    b.ToTable("email_log", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.EmailSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<int>("GroupId")
                        .HasColumnType("integer")
                        .HasColumnName("group_id");

                    b.Property<string>("Schedule")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("schedule");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_email_schedule");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_email_schedule_group_id");

                    b.ToTable("email_schedule", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BodyTemplate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body_template");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<int>("EmailGroupId")
                        .HasColumnType("integer")
                        .HasColumnName("email_group_id");

                    b.Property<string>("FromEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_email");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("from_name");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.Property<int>("RetryInterval")
                        .HasColumnType("integer")
                        .HasColumnName("retry_interval");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("subject");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_email_template");

                    b.HasIndex("EmailGroupId")
                        .HasDatabaseName("ix_email_template_email_group_id");

                    b.ToTable("email_template", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ScopeUid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scope_uid");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_file");

                    b.ToTable("file", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.IpDetails", b =>
                {
                    b.Property<string>("Ip")
                        .HasColumnType("text")
                        .HasColumnName("ip");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.Property<int>("ContinentCode")
                        .HasColumnType("integer")
                        .HasColumnName("continent_code");

                    b.Property<int>("CountryCode")
                        .HasColumnType("integer")
                        .HasColumnName("country_code");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision")
                        .HasColumnName("latitude");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision")
                        .HasColumnName("longitude");

                    b.HasKey("Ip")
                        .HasName("pk_ip_details");

                    b.HasIndex("Ip")
                        .IsUnique()
                        .HasDatabaseName("ix_ip_details_ip");

                    b.ToTable("ip_details", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("destination");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_link");

                    b.HasIndex("Uid")
                        .IsUnique()
                        .HasDatabaseName("ix_link_uid");

                    b.ToTable("link", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.LinkLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("destination");

                    b.Property<int>("LinkId")
                        .HasColumnType("integer")
                        .HasColumnName("link_id");

                    b.Property<string>("Referrer")
                        .HasColumnType("text")
                        .HasColumnName("referrer");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("Id")
                        .HasName("pk_link_log");

                    b.HasIndex("LinkId")
                        .HasDatabaseName("ix_link_log_link_id");

                    b.ToTable("link_log", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extension");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("mime_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("ScopeUid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scope_uid");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_media");

                    b.ToTable("media", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AffiliateName")
                        .HasColumnType("text")
                        .HasColumnName("affiliate_name");

                    b.Property<decimal>("Commission")
                        .HasColumnType("numeric")
                        .HasColumnName("commission");

                    b.Property<int>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<string>("ContactIp")
                        .HasColumnType("text")
                        .HasColumnName("contact_ip");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<decimal>("CurrencyTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("currency_total");

                    b.Property<string>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("numeric")
                        .HasColumnName("exchange_rate");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("text")
                        .HasColumnName("order_number");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("RefNo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ref_no");

                    b.Property<decimal>("Refund")
                        .HasColumnType("numeric")
                        .HasColumnName("refund");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<bool>("TestOrder")
                        .HasColumnType("boolean")
                        .HasColumnName("test_order");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_order");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_order_contact_id");

                    b.HasIndex("RefNo")
                        .IsUnique()
                        .HasDatabaseName("ix_order_ref_no");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<decimal>("CurrencyTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("currency_total");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer")
                        .HasColumnName("order_id");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("product_name");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric")
                        .HasColumnName("total");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric")
                        .HasColumnName("unit_price");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_order_item");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_order_item_order_id");

                    b.ToTable("order_item", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_ip");

                    b.Property<string>("UpdatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("updated_by_user_agent");

                    b.HasKey("Id")
                        .HasName("pk_promotion");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_promotion_code");

                    b.ToTable("promotion", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.TaskExecutionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_execution_time");

                    b.Property<string>("Comment")
                        .HasColumnType("text")
                        .HasColumnName("comment");

                    b.Property<int?>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.Property<DateTime>("ScheduledExecutionTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("scheduled_execution_time");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TaskName")
                        .HasColumnType("text")
                        .HasColumnName("task_name");

                    b.HasKey("Id")
                        .HasName("pk_task_execution_log");

                    b.ToTable("task_execution_log", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.Unsubscribe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer")
                        .HasColumnName("contact_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text")
                        .HasColumnName("created_by_ip");

                    b.Property<string>("CreatedByUserAgent")
                        .HasColumnType("text")
                        .HasColumnName("created_by_user_agent");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reason");

                    b.Property<string>("Source")
                        .HasColumnType("text")
                        .HasColumnName("source");

                    b.HasKey("Id")
                        .HasName("pk_unsubscribe");

                    b.HasIndex("ContactId")
                        .HasDatabaseName("ix_unsubscribe_contact_id");

                    b.ToTable("unsubscribe", (string)null);
                });

            modelBuilder.Entity("OnlineSales.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("avatar_url");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Dictionary<string, object>>("Data")
                        .HasColumnType("jsonb")
                        .HasColumnName("data");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<DateTime?>("LastTimeLoggedIn")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_time_logged_in");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ContactDeal", b =>
                {
                    b.HasOne("OnlineSales.Entities.Contact", null)
                        .WithMany()
                        .HasForeignKey("ContactsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_deal_contact_contacts_id");

                    b.HasOne("OnlineSales.Entities.Deal", null)
                        .WithMany()
                        .HasForeignKey("DealsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_deal_deal_deals_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_claims_roles_role_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineSales.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_claims_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineSales.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_logins_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_roles_role_id");

                    b.HasOne("OnlineSales.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_roles_users_user_id");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineSales.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_tokens_users_user_id");
                });

            modelBuilder.Entity("OnlineSales.Entities.Comment", b =>
                {
                    b.HasOne("OnlineSales.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comment_contact_contact_id");

                    b.HasOne("OnlineSales.Entities.Comment", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .HasConstraintName("fk_comment_comment_parent_id");

                    b.Navigation("Contact");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OnlineSales.Entities.Contact", b =>
                {
                    b.HasOne("OnlineSales.Entities.Account", "Account")
                        .WithMany("Contacts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_contact_account_account_id");

                    b.HasOne("OnlineSales.Entities.Domain", "Domain")
                        .WithMany("Contacts")
                        .HasForeignKey("DomainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_contact_domain_domain_id");

                    b.HasOne("OnlineSales.Entities.Unsubscribe", "Unsubscribe")
                        .WithMany()
                        .HasForeignKey("UnsubscribeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_contact_unsubscribe_unsubscribe_id");

                    b.Navigation("Account");

                    b.Navigation("Domain");

                    b.Navigation("Unsubscribe");
                });

            modelBuilder.Entity("OnlineSales.Entities.ContactEmailSchedule", b =>
                {
                    b.HasOne("OnlineSales.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_email_schedule_contact_contact_id");

                    b.HasOne("OnlineSales.Entities.EmailSchedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_contact_email_schedule_email_schedule_schedule_id");

                    b.Navigation("Contact");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("OnlineSales.Entities.Deal", b =>
                {
                    b.HasOne("OnlineSales.Entities.Account", "Account")
                        .WithMany("Deals")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("fk_deal_account_account_id");

                    b.HasOne("OnlineSales.Entities.DealPipeline", "DealPipeline")
                        .WithMany()
                        .HasForeignKey("DealPipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deal_deal_pipeline_deal_pipeline_id");

                    b.HasOne("OnlineSales.Entities.DealPipelineStage", "DealPipelineStage")
                        .WithMany()
                        .HasForeignKey("DealPipelineStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deal_deal_pipeline_stage_deal_pipeline_stage_id");

                    b.HasOne("OnlineSales.Entities.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deal_users_user_id");

                    b.Navigation("Account");

                    b.Navigation("CreatedBy");

                    b.Navigation("DealPipeline");

                    b.Navigation("DealPipelineStage");
                });

            modelBuilder.Entity("OnlineSales.Entities.DealPipelineStage", b =>
                {
                    b.HasOne("OnlineSales.Entities.DealPipeline", "DealPipeline")
                        .WithMany("PipelineStages")
                        .HasForeignKey("DealPipelineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_deal_pipeline_stage_deal_pipeline_deal_pipeline_id");

                    b.Navigation("DealPipeline");
                });

            modelBuilder.Entity("OnlineSales.Entities.Discount", b =>
                {
                    b.HasOne("OnlineSales.Entities.Order", "Order")
                        .WithMany("Discounts")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_discount_order_order_id");

                    b.HasOne("OnlineSales.Entities.OrderItem", "OrderItem")
                        .WithOne("Discount")
                        .HasForeignKey("OnlineSales.Entities.Discount", "OrderItemId")
                        .HasConstraintName("fk_discount_order_item_order_item_id");

                    b.HasOne("OnlineSales.Entities.Promotion", "Promotion")
                        .WithMany()
                        .HasForeignKey("PromotionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_discount_promotion_promotion_id");

                    b.Navigation("Order");

                    b.Navigation("OrderItem");

                    b.Navigation("Promotion");
                });

            modelBuilder.Entity("OnlineSales.Entities.Domain", b =>
                {
                    b.HasOne("OnlineSales.Entities.Account", "Account")
                        .WithMany("Domains")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_domain_account_account_id");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("OnlineSales.Entities.EmailSchedule", b =>
                {
                    b.HasOne("OnlineSales.Entities.EmailGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_schedule_email_group_group_id");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("OnlineSales.Entities.EmailTemplate", b =>
                {
                    b.HasOne("OnlineSales.Entities.EmailGroup", "EmailGroup")
                        .WithMany("EmailTemplates")
                        .HasForeignKey("EmailGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_email_template_email_group_email_group_id");

                    b.Navigation("EmailGroup");
                });

            modelBuilder.Entity("OnlineSales.Entities.LinkLog", b =>
                {
                    b.HasOne("OnlineSales.Entities.Link", "Link")
                        .WithMany()
                        .HasForeignKey("LinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_link_log_link_link_id");

                    b.Navigation("Link");
                });

            modelBuilder.Entity("OnlineSales.Entities.Order", b =>
                {
                    b.HasOne("OnlineSales.Entities.Contact", "Contact")
                        .WithMany("Orders")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_contact_contact_id");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("OnlineSales.Entities.OrderItem", b =>
                {
                    b.HasOne("OnlineSales.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_order_item_order_order_id");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineSales.Entities.Unsubscribe", b =>
                {
                    b.HasOne("OnlineSales.Entities.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .HasConstraintName("fk_unsubscribe_contact_contact_id");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("OnlineSales.Entities.Account", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Deals");

                    b.Navigation("Domains");
                });

            modelBuilder.Entity("OnlineSales.Entities.Contact", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OnlineSales.Entities.DealPipeline", b =>
                {
                    b.Navigation("PipelineStages");
                });

            modelBuilder.Entity("OnlineSales.Entities.Domain", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("OnlineSales.Entities.EmailGroup", b =>
                {
                    b.Navigation("EmailTemplates");
                });

            modelBuilder.Entity("OnlineSales.Entities.Order", b =>
                {
                    b.Navigation("Discounts");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("OnlineSales.Entities.OrderItem", b =>
                {
                    b.Navigation("Discount");
                });
#pragma warning restore 612, 618
        }
    }
}
